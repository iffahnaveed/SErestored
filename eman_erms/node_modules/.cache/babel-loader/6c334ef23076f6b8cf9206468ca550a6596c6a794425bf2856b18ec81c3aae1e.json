{"ast":null,"code":"const API_URL = 'http://localhost:5000/api/auth';\n\n// Signup API call\nexport const signupHR = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Signup failed: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n};\n\n// Login API call\nexport const loginHR = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Login failed: ${response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["API_URL","signupHR","userData","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","error","message","loginHR"],"sources":["D:/Users/SEPROJECT/erms/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api/auth';\r\n\r\n// Signup API call\r\nexport const signupHR = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Signup failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    return { error: error.message };\r\n  }\r\n};\r\n\r\n// Login API call\r\nexport const loginHR = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Login failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    return { error: error.message };\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC;;AAEhD;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,SAAS,EAAE;MAChDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkBR,QAAQ,CAACS,UAAU,EAAE,CAAC;IAC1D;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EACjC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOd,QAAQ,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;MAC/CK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiBR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACzD;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC;EACjC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}