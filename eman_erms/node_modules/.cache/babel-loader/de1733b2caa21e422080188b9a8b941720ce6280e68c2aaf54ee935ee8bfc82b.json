{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst pool = require('../db'); // PostgreSQL connection\nconst router = express.Router();\nrouter.post('/signup', async (req, res) => {\n  try {\n    const {\n      username,\n      email,\n      password\n    } = req.body;\n\n    // 1️⃣ Check if user already exists\n    const existingUser = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n    if (existingUser.rows.length > 0) {\n      return res.status(400).json({\n        message: 'User already exists'\n      });\n    }\n\n    // 2️⃣ Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // 3️⃣ Insert into database\n    const newUser = await pool.query('INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING *', [username, email, hashedPassword]);\n    res.status(201).json({\n      message: 'Signup successful',\n      user: newUser.rows[0]\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","pool","router","Router","post","req","res","username","email","password","body","existingUser","query","rows","length","status","json","message","hashedPassword","hash","newUser","user","error","console","module","exports"],"sources":["D:/Users/SEPROJECT/erms/src/components/signup.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst pool = require('../db');  // PostgreSQL connection\r\nconst router = express.Router();\r\n\r\nrouter.post('/signup', async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n\r\n    // 1️⃣ Check if user already exists\r\n    const existingUser = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\r\n\r\n    if (existingUser.rows.length > 0) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // 2️⃣ Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // 3️⃣ Insert into database\r\n    const newUser = await pool.query(\r\n      'INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING *',\r\n      [username, email, hashedPassword]\r\n    );\r\n\r\n    res.status(201).json({ message: 'Signup successful', user: newUser.rows[0] });\r\n\r\n  } catch (error) {\r\n    console.error('Signup error:', error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,IAAI,GAAGF,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;AAChC,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;;IAE9C;IACA,MAAMC,YAAY,GAAG,MAAMV,IAAI,CAACW,KAAK,CAAC,sCAAsC,EAAE,CAACJ,KAAK,CAAC,CAAC;IAEtF,IAAIG,YAAY,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAChC,OAAOR,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMlB,MAAM,CAACmB,IAAI,CAACV,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMW,OAAO,GAAG,MAAMnB,IAAI,CAACW,KAAK,CAC9B,+EAA+E,EAC/E,CAACL,QAAQ,EAAEC,KAAK,EAAEU,cAAc,CAClC,CAAC;IAEDZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,mBAAmB;MAAEI,IAAI,EAAED,OAAO,CAACP,IAAI,CAAC,CAAC;IAAE,CAAC,CAAC;EAE/E,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrChB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;AAEFO,MAAM,CAACC,OAAO,GAAGvB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}